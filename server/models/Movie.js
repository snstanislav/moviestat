/**
 * @file Movie.js
 * @description Mongoose schema and model for movies and TV shows.
 * @author Stanislav Snisar
 * @version 1.0.0
 * @module models/Movie
 * @requires mongoose - MongoDB ODM for Node.js
 */

const mongoose = require("mongoose");

/**
 * Mongoose schema for movie and TV show documents.
 * 
 * @typedef {Object} MovieSchema
 * 
 * @property {string} type - Media type identifier ('movie' | 'tv')
 * @property {string} tmdbID - The Movie Database (TMDB) unique identifier
 * @property {string} imdbID - Internet Movie Database (IMDb) unique identifier
 * @property {string} imdbRating - IMDb user rating score
 * @property {string} imdbVotes - Number of IMDb user votes
 * @property {string} commTitle - Common title of the movie or TV show
 * @property {string} origTitle - Original title in the original language * 
 * @property {string} year - Release year or year range
 * @property {string} duration - Runtime duration (e.g., '45 min')
 * @property {string} parental - Parental guidance/content rating (e.g., 'PG-13')
 * @property {string} plot - Plot synopsis or overview
 * @property {string} poster - URL to movie poster image
 * @property {string} budget - Production budget amount
 * @property {string} boxOffice - Box office revenue/gross earnings
 * @property {Array<string>} countries - Production countries
 * @property {Array<string>} languages - Spoken languages
 * @property {Array<string>} genres - Movie/TV show genres
 * 
 * @property {Array<Object>} directors - Array of director objects
 *   Type: {mongoose.Types.ObjectId} person - Reference to Person document
 * @property {Array<Object>} writers - Array of writer/screenplay objects
 *   Type: {mongoose.Types.ObjectId} person - Reference to Person document
 * @property {Array<Object>} producers - Array of producer objects
 *   Type: {mongoose.Types.ObjectId} person - Reference to Person document
 * @property {Array<Object>} composers - Array of composer objects
 *   Type: {mongoose.Types.ObjectId} person - Reference to Person document
 * @property {Array<Object>} cast - Array of cast member objects with character information
 *   Type: {mongoose.Types.ObjectId} person - Reference to Person document
 * 
 * @property {Date} createdAt - Auto-generated by timestamps option, immutable after creation
 * @property {Date} updatedAt - Auto-generated and auto-updated by timestamps option
 * 
 * @description Complete schema for storing movie and TV show information in MongoDB.
 *   Uses references to Person documents for all cast and crew to normalize data.
 * 
 * @example
 * // Finding highly-rated movies
 * const topMovies = await Movie.find({
 *   imdbRating: { $gte: '8.0' },
 *   type: 'movie'
 * })
 *   .sort({ imdbRating: -1 })
 *   .limit(10)
 *   .exec();
 */
const movieSchema = new mongoose.Schema({
    // common id/type props
    type: String,
    tmdbID: String,
    // imdb props
    imdbID: String,
    imdbRating: String,
    imdbVotes: String,
    // general props
    commTitle: String,
    origTitle: String,
    year: String,
    duration: String,
    parental: String,
    plot: String,
    poster: String,
    budget: String,
    boxOffice: String,
    // multiple common props
    countries: [String],
    languages: [String],
    genres: [String],
    // multiple crew props
    directors: [{ person: { type: mongoose.Types.ObjectId, ref: "Person" } }],
    writers: [{ person: { type: mongoose.Types.ObjectId, ref: "Person" } }],
    producers: [{ person: { type: mongoose.Types.ObjectId, ref: "Person" } }],
    composers: [{ person: { type: mongoose.Types.ObjectId, ref: "Person" } }],
    cast: [{
        person: { type: mongoose.Types.ObjectId, ref: "Person" },
        character: { type: String }
    }]
}, { timestamps: true });

module.exports.movieSchema = movieSchema;
module.exports.Movie = mongoose.model("Movie", movieSchema, "movies");

